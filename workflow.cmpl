#!/usr/bin/cmpl
%opt cbc threads 2
%data workflow.cdat: providers set, instances set, storages set, provider_max_machines[providers], instance_price[instances], ccu[instances], instance_transfer_price_out[instances], instance_transfer_price_in[instances], storage_transfer_price_in[storages], storage_transfer_price_out[storages], transfer_rate[instances, storages], request_price, tasks set, layers set, task_count[tasks], exec_time[tasks], data_size_in[tasks], data_size_out[tasks], workflow_deadline
%display nonZeros
%display var *
%display con none

parameters:
  # Include infrastructure sets (can't do it from data file)
  include "infrastructure.cmpl"

  # Parameter validation  
  {type(instances) <> "set (enum)": error("instances set not provided"); }
  {type(storages) <> "set (enum)": error("storages set not provided"); }
  {p in providers, type(provider_max_machines[p]) <> "integer": error("storages set not provided"); }
  
  

  # Parameter preprocessing
  {p in providers, i in provider_instances[p]: instance_max_machines[i] := provider_max_machines[p]; }
  {i in instances: 
      instance_sets[i] := set(0..instance_max_machines[i]-1); 
      instance_sets_1[i] := set(1..instance_max_machines[i]-1); 
  }
  
  {p in providers, i in provider_instances[p], s in storages: {p << storage_local[s]: local[i,s] := 1.0; | default: local[i,s] := 0.0; } } # TODO
  
  {t in tasks, i in instances, s in storages: 
      transfer_time[t,i,s] :=  ((data_size_in[t]+data_size_out[t]) / (transfer_rate[i,s] * 3600)); 
      unit_time[t,i,s] := exec_time[t] / ccu[i];  # , transfer_time[t,i,storage] > );
      transfer_cost[t,i,s] := (data_size_out[t] * (instance_transfer_price_out[i]+storage_transfer_price_in[s]) + data_size_in[t] * (storage_transfer_price_out[s]+instance_transfer_price_in[i])) * local[i,s];
  }
  
variables: 
  {i in instances: InstanceActive[tasks, i, instance_sets[i] ]: binary; }
  {i in instances: InstanceHours[tasks, i, instance_sets[i]]: integer[0..workflow_deadline]; }
  {i in instances, t in tasks: InstanceTasks[t, i, instance_sets[i]]: integer[0..task_count[t] ]; }
  LayerDeadline[layers]: integer [1..workflow_deadline];
  LayerTime[layers]: real [0..workflow_deadline];

objectives: 
  cost: sum { t in tasks, i in instances, idx in instance_sets[i]: instance_price[i] * InstanceHours[t,i,idx] + (request_price + transfer_cost[t,i,storage])*InstanceTasks[t,i,idx] } -> min;

constraints:
  keep_layer_deadlines_sum_under_workflow_deadline: 
    sum { l in layers : LayerTime[l] } <= workflow_deadline;
  
  keep_layer_time {l in layers:
    LayerTime[l] <= LayerDeadline[l];
    LayerDeadline[l] <= LayerTime[l] + 1;
  }
  
  bind_instance_active_with_instance_hours {t in tasks, i in instances, idx in instance_sets[i]:
    InstanceHours[t,i,idx] >= InstanceActive[t,i,idx];
    InstanceHours[t,i,idx] <= workflow_deadline*InstanceActive[t,i,idx];
  }
  
  bind_instance_active_with_instance_tasks {t in tasks, i in instances, idx in instance_sets[i]:
    InstanceTasks[t,i,idx] >= InstanceActive[t,i,idx];
    InstanceTasks[t,i,idx] <= task_count[t] * InstanceActive[t,i,idx];
  }

  keep_layer_deadline {l in layers, t in layer_tasks[l], i in instances, idx in instance_sets[i]: 
    InstanceHours[t,i,idx] <= LayerDeadline[l];
    InstanceTasks[t,i,idx]*unit_time[t,i,storage] <= LayerTime[l];
  }

  is_there_enough_processing_power_to_do_the_tasks {t in tasks, i in instances, idx in instance_sets[i]:
    InstanceHours[t,i,idx] >= InstanceTasks[t,i,idx]*unit_time[t,i,storage];
    InstanceHours[t,i,idx] <= InstanceTasks[t,i,idx]*unit_time[t,i,storage] + 1;
  }

  enough_power {t in tasks:
    sum {i in instances, idx in instance_sets[i]: InstanceTasks[t,i,idx]} = task_count[t]; 
  }
 
  discard_symmetric_solutions {t in tasks, i in instances, idx in instance_sets_1[i]:
    InstanceHours[t,i,idx] <= InstanceHours[t,i,idx-1]; 
    InstanceActive[t,i,idx] <= InstanceActive[t,i,idx-1];
    InstanceTasks[t,i,idx] <= InstanceTasks[t,i,idx-1];
  }
 
  force_provider_instance_limit {l in layers, p in providers: 
    sum {i in provider_instances[p], t in layer_tasks[l], idx in instance_sets[i]: InstanceActive[t,i,idx]} <= provider_max_machines[p];
  }
  
